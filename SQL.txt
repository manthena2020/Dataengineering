CREATING A TABLE
------------------------------------------------------------------------------------------------------------------------
CREATE TABLE ranktable ( first_name VARCHAR(60),last_name VARCHAR(40),city VARCHAR(30));  
INSERT INTO ranktable (first_name, last_name, city) VALUES 
('Luisa', 'Evans', 'Texas'),
('Paul', 'Ward', 'Alaska'),
('Peter', 'Bennett', 'California'),
('Carlos', 'Patterson', 'New York'),
('Rose', 'Huges', 'Florida'),    
('Marielia', 'Simmons', 'Texas'),  
('Antonio', 'Butler', 'New York'),         
('Diego', 'Cox', 'California'); 
select * from ranktable;
------------------------------------------------------------------------------------------------------------------------
row_number
------------------------------------------------------------------------------------------------------------------------
select first_name,last_name,city,row_number() over(order by city) as cityrank from ranktable;
------------------------------------------------------------------------------------------------------------------------
rank()
select first_name,last_name,city,rank() over (order by city asc) as cityrank from ranktable;
------------------------------------------------------------------------------------------------------------------------
dense_rank
------------------------------------------------------------------------------------------------------------------------
select first_name,last_name,city,dense_rank() over(order by city asc) as cityrank from ranktable;
------------------------------------------------------------------------------------------------------------------------
TO select duplicate rows coloumns wise
------------------------------------------------------------------------------------------------------------------------
select city,count(*) as count from ranktable group by city having count(*)>1;
------------------------------------------------------------------------------------------------------------------------ 
To select duplicate values on entire table
------------------------------------------------------------------------------------------------------------------------
select first_name,last_name,city,count(*) as count from ranktable group by first_name,last_name,city having count(*)>1;
------------------------------------------------------------------------------------------------------------------------
To remove duplicate rows in table
 ------------------------------------------------------------------------------------------------------------------------
select distinct first_name,last_name,city from ranktable;
------------------------------------------------------------------------------------------------------------------------
create table sales(sno int,sales int);
insert into sales(sno,sales) values(1,100),(2,500),(3,600);
select * from sales;
------------------------------------------------------------------------------------------------------------------------
For cummulative total
------------------------------------------------------------------------------------------------------------------------
select sno,sales,sum(sales) over(order by sno rows between unbounded preceding and current row) as cummulative from sales;
select sno,sales,sum(sales) over(order by sno ) as cummulative from sales;
------------------------------------------------------------------------------------------------------------------------
SENARIO -1
------------------------------------------------------------------------------------------------------------------------
create database project;
use project;
create table persons(persons varchar(20) , fruit varchar(20));
insert into persons (persons,fruit) values('p1','apple'),('p1','banana'),('p1','mango'),('p3','banana')
,('p3','apple'),('p2','apple'),('p2','mango');

RESULT

persons 	 fruit

p1     		 apple
p1	   		 banana
p1			 mango
p3			 banana
p3			 apple
p2			 apple
p2			 mango


we have identify person have only two fruits bannan and apple.

version -1 
------------------------------------------------------------------------------------------------------------------------

STEP 1.
 select persons from persons group by persons having count(*)=2;

persons
p3
p2

This SQL statement retrieves all values in the "persons" column from the "persons" table,
 groups them by the "persons" column and only returns the groups that have a count of 2.

In other words, it returns all the unique "persons" values that have exactly 2 rows in the table.
 The "HAVING" clause is used to filter the groups based on a specified condition 
 (in this case, the count of each group must equal 2).
 The result of this statement will be a table that shows all the "persons" values that have 2 corresponding rows
 in the "persons" table.
 
STEP 2.
SELECT DISTINCT t1.persons
FROM persons AS t1
INNER JOIN persons AS t2
ON t1.persons = t2.persons
WHERE (t1.fruit = 'banana' AND t2.fruit = 'apple');

RESULT
persons

p1
p3

This SQL statement performs an INNER JOIN between two instances of the "persons" table, aliased as "t1" and "t2". 
The "ON" clause specifies the join condition that the "persons" column must match between the two tables.
 The "WHERE" clause then filters the result to only include rows where the "t1" table has 
 "banana" as the "fruit" value and the "t2" table has "apple" as the "fruit" value.

The result of this statement will be a table showing all unique "persons" values 
where there are corresponding rows in the "persons" table with both "banana" and "apple" as the "fruit" value.
 The "DISTINCT" keyword is used to eliminate any duplicates in the "persons" column.
 
 FINAL STEP  3 .

select t3.persons from 
(SELECT DISTINCT t1.persons
FROM persons AS t1
INNER JOIN persons AS t2
ON t1.persons = t2.persons
WHERE t1.fruit = 'banana' AND t2.fruit = 'apple')t3
leftjoin 
(select persons from persons group by persons having count(*)=2)t4
on t3.persons = t4.persons where t4.persons is not null;

RESULT

persons

p3

VERSION -2 
------------------------------------------------------------------------------------------------------------------------
SELECT persons
FROM persons
GROUP BY persons
HAVING COUNT(*) = 2 AND
       SUM(CASE WHEN fruit IN ('banana', 'apple') THEN 1 ELSE 0 END) = 2



This SQL statement first groups the "persons" table by the "persons" column and then uses the "HAVING"
 clause to filter the result to only include groups with exactly two rows.
 The "SUM" function with a "CASE" statement inside is used to count the number of rows
 where the "fruit" value is either "banana" or "apple". 
 The result of this statement will be a table showing all "persons" values that have exactly two rows in the "persons"
 table and both of those rows have either "banana" or "apple" as the "fruit" value.
 
 ====================================================================================================================================================
Scenario 2. lag function & partition 
====================================================================================================================================================


create table sales ( saledate date , fruit varchar(20) , nosold int);
----------------------------
saledate    fuit  nosold
----------------------------

2022-11-18  apple 10
2022-11-18  oranges     8
2022-11-19  apple 5
2022-11-19  oranges     5
2022-11-20  apples      7
2022-11-20  oranges     10
2022-11-20  bananna     10


i want to know the sale difference


Step 1.

select saledate,fruit,nosold,lag(nosold) over( partition by saledate order by saledate) as sold1 from sales;

Intermediate out put
----------------------------------
saledate    fuit  nosold  sold1
----------------------------------
2022-11-18  apple 10          null
2022-11-18  oranges     8           10
2022-11-19  apple 5           null
2022-11-19  oranges     5           5
2022-11-20  apples      7           null
2022-11-20  oranges     10          7
2022-11-20  bananna     10          10   


step 2.

select saledate,(nosold-sold1) as Diff  
from (select saledate,fruit,nosold,lead(nosold) over( partition by saledate order by saledate) 
as sold1 from sales) a where sold1 is not null;



Final out put:

saledate      Diff

2022-11-18        2
2022-11-19        0
2022-11-20     -3
2022-11-20        0
====================================================================================================================================================
Senario 3 :


i have a TABLE

111
222
*
333
444
???


i need table with out special values


Stage 1:
SELECT column_name
FROM table_name
WHERE REGEXP_LIKE(column_name, '^[0-9]+$');





Final output

111
222
333
444
====================================================================================================================================================
To remove special  charcters in a table using REGEXP_LIKE(value, '^[0-9]+$');
====================================================================================================================================================
CREATE TABLE special_characters (
  id INT PRIMARY KEY,
  value VARCHAR(255)
);

INSERT INTO special_characters (id, value)
VALUES (1, '*'), (2, '@');
INSERT INTO special_characters (id, value)
VALUES (3, 20), (4, 30);


ID  VALUE

1     *
2     @
3     20
4     30
      


SELECT value
FROM special_characters
WHERE REGEXP_LIKE(value, '^[0-9]+$');






Final Output

20
30
====================================================================================================================================================
TO REPLACE SPECIAL CHARCTERS WITH NULL VALUE
====================================================================================================================================================


SELECT 
  CASE 
    WHEN REGEXP_LIKE(value, '^[0-9]+$') THEN value
    ELSE NULL 
  END AS value
FROM special_characters;



SELECT id,
  CASE 
    WHEN REGEXP_LIKE(value, '^[0-9]+$') THEN value
    ELSE 100 
  END AS value
FROM special_characters;


( This will print other coloumn also ) 

====================================================================================================================================================
SENARIO 4 : AVERAGE SALARY OF EMPLOYES BY department wise
====================================================================================================================================================
create table employees ( name varchar(20), age int , department varchar(20), salary int);
insert into employees ( name,age,department,salary) values('ravi',20,'HR',25000)
,('giri',20,'HR',25000)
,('latha',20,'IT',25000)
,('renu',20,'IT',25000)
,('nidhi',20,'AC',25000)
,('satish',20,'AC',25000);
select * from employees;

NAME  AGE   Dep   SALARY
ravi  20    HR    25000
giri  20    HR    25000
latha 20    IT    25000
renu  20    IT    25000
nidhi 20    AC    25000
satish      20    AC    25000


i want average salary of employes  for each department order employees within a department by age.


STEP 1.



AC    nidhi 20    25000.0000
AC    satish      20    25000.0000
HR    ravi  20    25000.0000
HR    giri  20    25000.0000
IT    latha 20    25000.0000
IT    renu  20    25000.0000

select department,name,age,avg(salary) over (partition by department) as avgsalary from employees 
order by department,age desc;

====================================================================================================================================================
5. To Find Maximum population and minium Population 
====================================================================================================================================================

 u have a table with 2 coloumn country, population 
 LIKE
 
 Brazil 9191
 india 1245
 etc
 
 1st row should have india in clountry
 2 row should have  higest pouplation irrespective of country
 3 row should have lowest population
 
 create table country (country varchar(50),population int);
insert into country(country,population) values("Brazil",10000)
,("india",20000)
,("USA",30000)
,("UK",40000);

country       population
Brazil            10000
india       20000
USA               30000
UK                40000

select country as data from country where country = 'india'
union 
select max(population) as maximum from country 
union
select min(population) as maximum from country;
====================================================================================================================================================
6.FIND THE USER IDS which are having more ougoing messages for feb month compared to jan month

by using the below table

create table mobile(userid int,mobileno bigint,msgtype varchar(20),MDate date);
ALTER TABLE table_name MODIFY column_name INT;
insert into mobile values(12345,9988445566,'outgoing','23-01-22');
insert into mobile values(67890,8899445566,'incoming','01-02-22');
insert into mobile values(78915,7799884455,'outgoing','23-01-22');
insert into mobile values(12345,669811224,'outgoing','02-02-22');
insert into mobile values(12345,5598445566,'incoming','24-01-22');
insert into mobile values(12345,1199885544,'outgoing','05-02-22');

select * from mobile;

userid	  Mobileno	 msgtype	Date
12345	9988445566	outgoing	2023-01-22
67890	8899445566	incoming	2001-02-22
78915	7799884455	outgoing	2023-01-22
12345	669811224	outgoing	2002-02-22
12345	5598445566	incoming	2024-01-22
12345	1199885544	outgoing	2005-02-22

select * from
(
select userid,mon_data,(out_num-diff) as diff1 
from
(
select userid,mon_data,out_num,
lead(out_num) over (partition by msgtype) as diff
from
(
select userid,msgtype,mon_data,count(*) as out_num
from
(select *,date_format(str_to_date(MDate,'%Y-%m-%d'),'%m')
as mon_data from mobile) a
where msgtype = 'outgoing'
group by userid,msgtype,mon_data
order by userid,mon_data
)b
)c
)d 
where (diff1 <> 0 or diff1 is not null);
====================================================================================================================================================
